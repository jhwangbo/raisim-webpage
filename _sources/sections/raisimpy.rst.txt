#############################
RaisimPy
#############################

raisimPy was originally developed by Brian Delhaisse.
RaiSim Tech Inc. is continuing th development now.

The syntax of raisimPy is nearly identical to that of the C++ API.
Therefore, we do not provide a separate documentation for the python API.
An example application of raisimPy is shown below

.. container:: twocol

    .. container:: leftside

        .. code-block:: c

            #include "raisim/RaisimServer.hpp"
            #include "raisim/World.hpp"

            int main(int argc, char* argv[]) {
              auto binaryPath = raisim::Path::setFromArgv(argv[0]);
              raisim::World::setActivationKey(binaryPath.getDirectory() + "\\rsc\\activation.raisim");

              /// create raisim world
              raisim::World world;

              /// create objects
              raisim::TerrainProperties terrainProperties;
              terrainProperties.frequency = 0.2;
              terrainProperties.zScale = 3.0;
              terrainProperties.xSize = 20.0;
              terrainProperties.ySize = 20.0;
              terrainProperties.xSamples = 50;
              terrainProperties.ySamples = 50;
              terrainProperties.fractalOctaves = 3;
              terrainProperties.fractalLacunarity = 2.0;
              terrainProperties.fractalGain = 0.25;
              raisim::HeightMap* hm = world.addHeightMap(0.0, 0.0, terrainProperties);

              std::vector<raisim::ArticulatedSystem*> anymals;

              /// ANYmal joint PD controller
              Eigen::VectorXd jointNominalConfig(19), jointVelocityTarget(18);
              Eigen::VectorXd jointState(18), jointForce(18), jointPgain(18), jointDgain(18);
              jointPgain.setZero();
              jointDgain.setZero();
              jointVelocityTarget.setZero();
              jointPgain.tail(12).setConstant(200.0);
              jointDgain.tail(12).setConstant(10.0);

              const size_t N = 4;

              for (size_t i = 0; i < N; i++) {
                for (size_t j = 0; j < N; j++) {
                  anymals.push_back(world.addArticulatedSystem(binaryPath.getDirectory() + "\\rsc\\anymal\\urdf\\anymal.urdf"));
                  anymals.back()->setGeneralizedCoordinate({double(2 * i), double(j), 2.5, 1.0, 0.0, 0.0, 0.0, 0.03, 0.4, -0.8, -0.03, 0.4, -0.8, 0.03, -0.4, 0.8, -0.03, -0.4, 0.8});
                  anymals.back()->setGeneralizedForce(Eigen::VectorXd::Zero(anymals.back()->getDOF()));
                  anymals.back()->setControlMode(raisim::ControlMode::PD_PLUS_FEEDFORWARD_TORQUE);
                  anymals.back()->setPdGains(jointPgain, jointDgain);
                  anymals.back()->setName("anymal" + std::to_string(j + i * N));
                }
              }

              /// launch raisim servear
              raisim::RaisimServer server(&world);
              server.launchServer();

              while (1) {
                raisim::MSLEEP(2);
                server.integrateWorldThreadSafe();
              }
              server.killServer();
            }

    .. container:: rightside

        .. code-block:: python

            import os
            import numpy as np
            import raisimpy as raisim
            import time

            raisim.World.setLicenseFile(os.path.dirname(os.path.abspath(__file__)) + "/../../rsc/activation.raisim")
            world = raisim.World()
            world.setTimeStep(0.001)

            # create objects
            terrainProperties = raisim.TerrainProperties()
            terrainProperties.frequency = 0.2
            terrainProperties.zScale = 3.0
            terrainProperties.xSize = 20.0
            terrainProperties.ySize = 20.0
            terrainProperties.xSamples = 50
            terrainProperties.ySamples = 50
            terrainProperties.fractalOctaves = 3
            terrainProperties.fractalLacunarity = 2.0
            terrainProperties.fractalGain = 0.25
            hm = world.addHeightMap(0.0, 0.0, terrainProperties)

            # robot
            anymal_urdf_file = os.path.dirname(os.path.abspath(__file__)) + "/../../rsc/anymal/urdf/anymal.urdf"
            anymal = world.addArticulatedSystem(anymal_urdf_file)

            # ANYmal joint PD controller
            anymal_nominal_joint_config = np.array([0, -1.5, 2.54, 1.0, 0.0, 0.0, 0.0, 0.03, 0.4, -0.8,
                                                    -0.03, 0.4, -0.8, 0.03, -0.4, 0.8, -0.03, -0.4, 0.8])
            anymal.setGeneralizedCoordinate(anymal_nominal_joint_config)
            anymal.setPdGains(200*np.ones([18]), np.ones([18]))
            anymal.setPdTarget(anymal_nominal_joint_config, np.zeros([18]))

            # launch raisim servear
            server = raisim.RaisimServer(world)
            server.launchServer(8080)

            for i in range(500000):
                world.integrate()
                time.sleep(0.0005)

            server.killServer()