#############################
Articulated Systems
#############################
Articulated Systems are a system of multiple bodies connected by joints. 
There are two types of articulated systems: *Kinematic trees* and *closed-loop systems*. 
Kinematic trees do not contain a loop (a body always has only one joint).
Consequently, the number of joints is equal to the number of bodies (for floating systems, we assign a floating joint on the root body).
RaiSim can only simulate **kinematic trees**.


State Representation
=============================
The state of an articulated system can be represented by a **generalized state** :math:`\boldsymbol{S}`, which is composed of a **generalized coordinate** :math:`\boldsymbol{q}` and a **generalized velocity** :math:`\boldsymbol{u}`.
Since we are not constraining their parameterization, in general, 

.. math::

  \begin{equation}
    \boldsymbol{u}\neq\dot{\boldsymbol{q}}.
  \end{equation}

A generalized coordinate fully represents the configuration of the articulated system and a generalized velocity fully represents the velocity state of the articulated system.

Both Generalized coordinate and velocity are defined by what joints link the bodies together.
Each joint has a generalized coordinate and a generalized velocity.
Stack of all joint generalized coordinates and velocities are the generalized coordinates and velocities of the articulated system, respectively.
The order of stacking is called **joint order**.
The joint order is the order the joint appears in the URDF unless otherwise it is explicitly given at the construction time.
It starts with a **root body** which is the first body of the articulated system. 
For floating-base systems, a root body is the floating base.
For fixed-base systems, a root body is the one rigidly attached to the wolrd (and thus cannot move).
The following example illustrates how the generalized coordinates and velocities are defined.

**image here**

To set the state of the system, the following methods can be used

* :code:`setGeneralizedCoordinate`
* :code:`setGeneralizedVelocity`

To obtain the state of the system, the following methods can be used

* :code:`getGeneralizedCoordinate`
* :code:`getGeneralizedVelocity`

The dimensions of each vector can be obtained respectively by

* :code:`getGeneralizedCoordinateDim`
* :code:`getDOF` or :code:`getGeneralizedVelocityDim`. These two methods are identical

Joints
=============================

Here are the available joints in RaiSim.

.. list-table:: Joint Properties (:math:`|\cdot|` is a symbol for dimension size (i.e., cardinality))
   :widths: 14 14 15 14 14 14
   :header-rows: 1

   * -
     - Fixed
     - Floating
     - Revolute
     - Prismatic
     - Spherical
   * - :math:`|\boldsymbol{u}|`
     - 0
     - 6
     - 1
     - 1
     - 3
   * - :math:`|\boldsymbol{q}|`
     - 0
     - 7
     - 1
     - 1
     - 4
   * - Velocity
     -
     - :math:`m/s`, :math:`rad/s`
     - :math:`rad/s`
     - :math:`m/s`
     - :math:`rad/s`
   * - Position
     -
     - :math:`m`, :math:`rad`
     - :math:`rad`
     - :math:`m`
     - :math:`rad`
   * - Force
     -
     - :math:`N`, :math:`Nm`
     - :math:`Nm`
     - :math:`N`
     - :math:`Nm`

The generalized coordinates/velocities of a joint are expressed in the **joint frame** and with respect to the **parent body**.
Joint frame is the frame attached to every joint and fixed to the parent body.
Parent body is the one closer to the root body among the two bodies connected via the joint.
Note that the angular velocity of a floating base is also expressed in a parent frame (which is the **world frame**).
Other libraries (e.g., RBLD) might have a different convention and a special care has to be taken in conversions.


URDF convention
=============================
RaiSim uses a modified URDF protocol to define an articulated system.
URDF files following the original convention can be read in RaiSim.
However, since RaiSim offers more functionalities, a RaiSim URDF might not be read by other libraries following the original URDF convention.

The modifications are as follows:

* Capsule geom is available for both collision objects and visual objects (with the keyword "capsule"). The geom is defined by "height" and "radius" keyword. The height represents the distance between the two center points of the spheres.

* A <joint>/<dynamics> tag can have three more attributes: *rotor inertia*, *spring_mount* and *stiffness*. 

**Rotor inertia** in Raisim approximately simulates the rotor inertia of the motor (but missing the resulting gyroscopic effect, which is often neglegible). 
It is common way to include the inertial effect of the rotor.
You can also override it in C++ using :code:`setRotorInertia()`.

In RaiSim, each body of an articulated system has a set of collision bodies and visual objects. 

Collision bodies contain a collision object of one of the following shapes: *mesh*, *sphere*, *box*, *cylinder*, *capsule*. 

Visual objects just store specifications for visualization and the actual visualzation happens in a visualizer (e.g., `raisimOgre <https://github.com/leggedrobotics/raisimOgre>`_)

For details, check the `URDF protocol <http://wiki.ros.org/urdf/XML>`_.

Kinematics
=============================
A position and velocity of a specific point on a body of an articulated system can be obtained by attaching a **frame**.
**Frame** of an articulated system in RaiSim is rigidly attached to a body of the system and has a constant position and orientation (w.r.t. parent frame).
It is the most recommended way to get kinematics information of a point of an articulated system in RaiSim.

All joint frames have a frame attached and their names are the same as the joint name.
To create a custom frame, a fixed frame can be defined at the point of the interest.
A dummy link with zero inertia and zero mass can be added on one side of the fixed joint to complete the kinematic tree.

A frame can be locally stored as an index in the user code. For e.g.,

.. code-block:: c

  #include “raisim/World.hpp”

  int main() {
    raisim::World world;
    auto anymal = world.addArticulatedSystem(PATH_TO_URDF);
    auto footFrameIndex = world.getFrameIdxByName("foot_joint"); // the URDF has a joint named "foot_joint"
    raisim::Vec<3> footPosition, footVelocity, footAngularVelocity;
    raisim::Mat<3,3> footOrientation;
    world.getFramePosition(footFrameIndex, footPosition);
    world.getFrameOrientation(footFrameIndex, footOrientation);
    world.getFrameVelocity(footFrameIndex, footVelocity);
    world.getFrameAngularVelocity(footFrameIndex, footAngularVelocity);
  }

You can also store Frame reference. 
For e.g., you can replace :code:`getFrameIdxByName` by :code:`getFrameByName` in the above example.
In this way, you can access the internal variables and even modify them.
Modifying the frames do not affect the joints.
Frames are instantiated during initialization of the articulated system instance and affect neither kinematics nor dynamics of the system.


Dynamics
=============================
All force and torque acting on the system can be represented as a single vector in the generalized velocity space.
This representation is called **generalized force** :math:`\boldsymbol{\tau}`.
Just like in a Cartesian coordiate (i.e., x, y, z axes), the power exerted by an articulated system is computed as a dot product of generalized force and generalized velocity (i.e., :math:`\boldsymbol{u}\cdot\boldsymbol{\tau}`).

We can also combine the mass and inertia of the whole articulated system and represent them in a single matrix.
This matrix is called **mass matrix** or **inertia matrix** and denoted by :math:`\boldsymbol{M}`. 
A mass matrix represents how much the articulated system resists change in generalized velocities.
Naively speaking, a large mass matrix means that the articulated system gets low velocity change for a given generalized force.

The total kinetic energy of the system is computed as :math:`\frac{1}{2}\boldsymbol{u}^T\boldsymbol{M}\boldsymbol{u}`.

The equation of motion of an articulated system is shown below:

.. math::

  \begin{equation}
     \boldsymbol{\tau} = \boldsymbol{M}(\boldsymbol{q})\dot{\boldsymbol{u}} + \boldsymbol{h}(\boldsymbol{q}, \boldsymbol{u}).
  \end{equation}

Here :math:`\boldsymbol{h}` is called a **non-linear term**. 
There are three sources of force that contributes to the non-linear term: gravity, coriolis, and centrifugal force.

The following methods are used to obtain dynamic quantities

* :code:`getMassMatrix()`
* :code:`getNonlinearities()`
* :code:`getInverseMassMatrix()`

It is rarely useful to compute the gravity contribution to the nonlinear term alone.
However, if it is needed, the easiest way is to make the same robot in another world with zero velocity.
If the generalized velocity is zero, the coriolis and centrifugal contributions are zero.

PD Controller
=============================
When naively implemented, a PD controller can often make a robot unstable.
For simulating a discrete control system (e.g., robot), this instability is also present in the real system.
However, it is often desirable to have a stable PD controller when a user wants to keep the time step small.

To use the PD controller, the control mode has to be set to the "PD_PLUS_FEEDFORWARD_TORQUE" mode as following

.. code-block:: c

  robot->setControlMode(ControlMode::Type::PD_PLUS_FEEDFORWARD_TORQUE);

The current control mode can be retrived as below

.. code-block:: c

  auto controlMode = robot->getControlMode();

Next, the desirable joint gains have to be set.

.. code-block:: c

  Eigen::VectorXd pGain(robot->getDOF()), dGain(robot->getDOF());
  pGain<< ...; // set your proportional gain values here
  dGain<< ...; // set your differential gain values here
  robot->setPdGains(pGain, dGain);

Note that **the dimension of the pGain vector is the same as that of the generalized velocity NOT that of the coordinate**.

Finally, the target position and the velocity can set as below

.. code-block:: c

  Eigen::VectorXd pTarget(robot->getGeneralizedCoordinateDim()), vTarget(robot->getDOF());
  pTarget<< ...; // set your position target
  vTarget<< ...; // set your velocity target
  robot->setPdTarget(pTarget, vTarget);

Here, **the dimension of the pTarget vector is the same as that of the generalized coordinate NOT that of the velocity**.
This is confusing and might seem inconsistent.
However, this is a valid convention.
The only reason that the two dimensions differ is a quaternion.
The quaternion target is represented by a quaternion whereas the virtual spring stiffness between the two orientations can be represented by a 3D vector, which is composed of motions in each angular velocity components.

The theory of the implemented PD controller can be found in chapter 1.2 of this `article <https://www.overleaf.com/read/dbqbgcnhzykq>`_. 
This document is only for advanced users and it is not necessary to use RaiSim.

Integration Steps
=============================
Integration of an articulated systems is performed as following

1. If the time step changed, update the damping of the mass matrix (which reflects effective inertial increase due to springs, dampers and PD gains)
2. Update positions of the collision bodies
3. Detect collisions (called by the world instance)
4. The world assigns contacts on each object and computes the contact normal
5. Compute the mass matrix, nonlinear term and inverse inertia matrix
6. Compute jacobians of contacts
7. Compute contact Properties
8. Compute PD controller (if used), add it to the feedforward force and bound it by the limits
9. Compute generalized forces due to springs and external forces/torques
10. Contact solver (called by the world instance)
11. Integrate the velocity
12. Integrate the position (in a semi-implicit way)

Types of Indicies
=============================
ArticulatedSystem class contains multiple types of indicies. To query a specific quantity, you have to provide an index of the right type. Here are the types of indicies in Articulated Systems

* **Body/Joint Index**: All fixed bodies are combined to a single movable body. Each movable body has a unique body index. Because there is a movable joint associated with a movable body, there is a 1-to-1 mapping between the joints and the bodies and they share the same index. For a fixed-base system, the first body rigidly fixed to the world is body-0. For a floating-base system, the floating base is body-0.
* **Generalized Velocity (DOF) Index**: All joints are mapped to a specific set of generalized velocity indicies.
* **Generalized Coordinate Index**:
* **Frame Index**:


Conversions Between Indicies
*****************************
* A body index to a generalized velocity index: :code:`ArticulatedSystem::getMappingFromBodyIndexToGeneralizedVelocityIndex()`
* A body index to a generalized coordinate index: :code:`ArticulatedSystem::getMappingFromBodyIndexToGeneralizedCoordinateIndex()`



